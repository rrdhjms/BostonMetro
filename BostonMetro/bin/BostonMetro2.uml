<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="20131001" xmlns:xmi="http://www.omg.org/spec/XMI/20131001" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:UMLLabProfile="http:///schemas/UMLLabProfile/NS/0" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/5.0.0/UML" xsi:schemaLocation="http:///schemas/UMLLabProfile/NS/0 pathmap://UMLLAB_PROFILES/UMLLab.profile.uml#UMLLabProfile-Annotation_2-UMLLabProfile">
  <uml:Model xmi:id="_T3yhYI7tEea0xZmjzxOSvw" name="BostonMetro2">
    <eAnnotations xmi:id="_UEVIkI7tEea0xZmjzxOSvw" source="http://ns.yatta.de/umllab">
      <contents xmi:type="ecore:EAnnotation" xmi:id="_UEVIkY7tEea0xZmjzxOSvw" source="codegen">
        <details xmi:id="_UEVIko7tEea0xZmjzxOSvw" key="codegenDirectory" value="/BostonMetro/BostonMetro/src"/>
        <details xmi:id="_UwsfUI7tEea0xZmjzxOSvw" key="AssociatedSourceCode" value="/BostonMetro/BostonMetro/src/BadFileException.java;805513210/1;/BostonMetro/BostonMetro/src/Edge.java;1852901733/1;/BostonMetro/BostonMetro/src/EdgeIn.java;3147806978/1;/BostonMetro/BostonMetro/src/Menu.java;3845791906/1;/BostonMetro/BostonMetro/src/MetroMapParser.java;4140522335/1;/BostonMetro/BostonMetro/src/Multigraph.java;772537193/1;/BostonMetro/BostonMetro/src/MultigraphADT.java;2961118146/1;/BostonMetro/BostonMetro/src/Node.java;785275553/1;/BostonMetro/BostonMetro/src/NodeIn.java;3438391/1;"/>
      </contents>
    </eAnnotations>
    <elementImport xmi:id="_UWXTwY7tEea0xZmjzxOSvw">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
    </elementImport>
    <elementImport xmi:id="_UWXTwo7tEea0xZmjzxOSvw">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#byte"/>
    </elementImport>
    <elementImport xmi:id="_UWXTw47tEea0xZmjzxOSvw">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#char"/>
    </elementImport>
    <elementImport xmi:id="_UWgdsI7tEea0xZmjzxOSvw">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
    </elementImport>
    <elementImport xmi:id="_UWgdsY7tEea0xZmjzxOSvw">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#float"/>
    </elementImport>
    <elementImport xmi:id="_UWgdso7tEea0xZmjzxOSvw">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
    </elementImport>
    <elementImport xmi:id="_UWgds47tEea0xZmjzxOSvw">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
    </elementImport>
    <elementImport xmi:id="_UWgdtI7tEea0xZmjzxOSvw">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#short"/>
    </elementImport>
    <elementImport xmi:id="_UWgdtY7tEea0xZmjzxOSvw">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
    </elementImport>
    <packagedElement xmi:type="uml:Package" xmi:id="_UVns4I7tEea0xZmjzxOSvw" name="java">
      <packagedElement xmi:type="uml:Package" xmi:id="_UVns4Y7tEea0xZmjzxOSvw" name="io">
        <packagedElement xmi:type="uml:Class" xmi:id="_UYmIYI7tEea0xZmjzxOSvw" name="IOException"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_UYmIZo7tEea0xZmjzxOSvw" name="BufferedReader"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_UYmIaI7tEea0xZmjzxOSvw" name="FileReader"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_UVns4o7tEea0xZmjzxOSvw" name="util">
        <packagedElement xmi:type="uml:Class" xmi:id="_UYmIYo7tEea0xZmjzxOSvw" name="ArrayList"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_UYmIZI7tEea0xZmjzxOSvw" name="Scanner"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_UYmIao7tEea0xZmjzxOSvw" name="StringTokenizer"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_UYv5YI7tEea0xZmjzxOSvw" name="HashSet"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_UYv5Yo7tEea0xZmjzxOSvw" name="Set"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_UY5DUI7tEea0xZmjzxOSvw" name="lang">
        <packagedElement xmi:type="uml:Class" xmi:id="_UY5DUY7tEea0xZmjzxOSvw" name="Exception"/>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_UWXTwI7tEea0xZmjzxOSvw" name="BadFileException">
      <generalization xmi:id="_UY5DU47tEea0xZmjzxOSvw" general="_UY5DUY7tEea0xZmjzxOSvw"/>
      <ownedAttribute xmi:id="_UZFQkI7tEea0xZmjzxOSvw" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
        <defaultValue xmi:type="uml:LiteralString" xmi:id="_UZF3oI7tEea0xZmjzxOSvw" value="-2854781356278888090L"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UZJiC47tEea0xZmjzxOSvw" name="BadFileException" specification="_UWgdto7tEea0xZmjzxOSvw">
        <ownedParameter xmi:id="_UZJiDI7tEea0xZmjzxOSvw" name="mes">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UZJiDY7tEea0xZmjzxOSvw" type="_UWXTwI7tEea0xZmjzxOSvw" direction="return"/>
        <language>java</language>
        <body>super(mes);&#xD;
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_UWgdto7tEea0xZmjzxOSvw" name="BadFileException" method="_UZJiC47tEea0xZmjzxOSvw">
        <eAnnotations xmi:id="_UWgduI7tEea0xZmjzxOSvw" source="http://www.eclipse.org/uml2/2.0.0/UML">
          <details xmi:id="_UWgduY7tEea0xZmjzxOSvw" key="create"/>
        </eAnnotations>
        <ownedParameter xmi:id="_UWgdt47tEea0xZmjzxOSvw" name="mes">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UWgduo7tEea0xZmjzxOSvw" type="_UWXTwI7tEea0xZmjzxOSvw" direction="return"/>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_UWgdu47tEea0xZmjzxOSvw" name="Edge">
      <ownedAttribute xmi:id="_UZF3oY7tEea0xZmjzxOSvw" name="nodeA" visibility="private" isReadOnly="true">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_UZGesI7tEea0xZmjzxOSvw" name="nodeB" visibility="private" isReadOnly="true">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_UZGesY7tEea0xZmjzxOSvw" name="label" visibility="private" isReadOnly="true">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      </ownedAttribute>
      <interfaceRealization xmi:id="_UYc-cI7tEea0xZmjzxOSvw" client="_UWgdu47tEea0xZmjzxOSvw" supplier="_UWqOt47tEea0xZmjzxOSvw" contract="_UWqOt47tEea0xZmjzxOSvw"/>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UZJiDo7tEea0xZmjzxOSvw" name="Edge" specification="_UWgdvI7tEea0xZmjzxOSvw">
        <ownedParameter xmi:id="_UZJiD47tEea0xZmjzxOSvw" name="lab">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UZJiEI7tEea0xZmjzxOSvw" name="aID">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UZJiEY7tEea0xZmjzxOSvw" name="bID">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UZJiEo7tEea0xZmjzxOSvw" type="_UWgdu47tEea0xZmjzxOSvw" direction="return">
          <name xsi:nil="true"/>
        </ownedParameter>
        <language>java</language>
        <body>label = lab;&#xD;
		nodeA = aID;&#xD;
		nodeB = bID;&#xD;
		&#xD;
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UZJiE47tEea0xZmjzxOSvw" name="setLabel">
        <ownedParameter xmi:id="_UZJiFI7tEea0xZmjzxOSvw" name="edgeLabel">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UZJiFY7tEea0xZmjzxOSvw" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
        </ownedParameter>
        <language>java</language>
        <body>label = edgeLabel;&#xD;
		return true;&#xD;
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UZJiFo7tEea0xZmjzxOSvw" name="setNodesOnEdge">
        <ownedParameter xmi:id="_UZJiF47tEea0xZmjzxOSvw" name="nodeAID">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UZJiGI7tEea0xZmjzxOSvw" name="nodeBID">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UZJiGY7tEea0xZmjzxOSvw" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
        </ownedParameter>
        <language>java</language>
        <body>nodeA = nodeAID;&#xD;
		nodeB = nodeBID;&#xD;
		return true;&#xD;
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_clMIkI-sEeaEOOcxHen0DA" name="setLabel">
        <ownedParameter xmi:id="_clMIkY-sEeaEOOcxHen0DA" name="edgeLabel">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_clMIko-sEeaEOOcxHen0DA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
        </ownedParameter>
        <language>java</language>
        <body>label = edgeLabel;&#xD;
		return true;&#xD;
	</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_UWgdvI7tEea0xZmjzxOSvw" name="Edge" method="_UZJiDo7tEea0xZmjzxOSvw">
        <eAnnotations xmi:id="_UWgdwI7tEea0xZmjzxOSvw" source="http://www.eclipse.org/uml2/2.0.0/UML">
          <details xmi:id="_UWgdwY7tEea0xZmjzxOSvw" key="create"/>
        </eAnnotations>
        <ownedParameter xmi:id="_UWgdvY7tEea0xZmjzxOSvw" name="lab">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UWgdvo7tEea0xZmjzxOSvw" name="aID">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UWgdv47tEea0xZmjzxOSvw" name="bID">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UWgdwo7tEea0xZmjzxOSvw" type="_UWgdu47tEea0xZmjzxOSvw" direction="return"/>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="_UWqOt47tEea0xZmjzxOSvw" name="EdgeIn">
      <ownedAttribute xmi:id="_M_3HkI-uEeaEOOcxHen0DA" name="multigraphADT" type="_UXG6qo7tEea0xZmjzxOSvw" association="_M_2ggI-uEeaEOOcxHen0DA">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_M_3HkY-uEeaEOOcxHen0DA" value="1"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_M_3Hko-uEeaEOOcxHen0DA" value="1"/>
      </ownedAttribute>
      <ownedOperation xmi:id="_UWqOu47tEea0xZmjzxOSvw" name="setLabel">
        <ownedParameter xmi:id="_UWqOvI7tEea0xZmjzxOSvw" name="edgeLabel">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UWqOvY7tEea0xZmjzxOSvw" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_u2sKAI-sEeaEOOcxHen0DA" name="getNodeA">
        <ownedParameter xmi:id="_u2sKAY-sEeaEOOcxHen0DA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_wq4EcI-sEeaEOOcxHen0DA" name="getNodeB">
        <ownedParameter xmi:id="_wq4EcY-sEeaEOOcxHen0DA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_x2pUAI-sEeaEOOcxHen0DA" name="getLabel">
        <ownedParameter xmi:id="_x2pUAY-sEeaEOOcxHen0DA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_UWqOwo7tEea0xZmjzxOSvw" name="Menu">
      <ownedAttribute xmi:id="_UZHFwI7tEea0xZmjzxOSvw" name="scan" visibility="private" isStatic="true" type="_UYmIZI7tEea0xZmjzxOSvw" association="_UZTTOI7tEea0xZmjzxOSvw"/>
      <ownedAttribute xmi:id="_UZHs0Y7tEea0xZmjzxOSvw" name="mGraph" visibility="private" isStatic="true" type="_UXG6qo7tEea0xZmjzxOSvw" association="_UZTTO47tEea0xZmjzxOSvw"/>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UZJiGo7tEea0xZmjzxOSvw" name="getInput" specification="_UWqOw47tEea0xZmjzxOSvw">
        <ownedParameter xmi:id="_UZJiG47tEea0xZmjzxOSvw" direction="return">
          <name xsi:nil="true"/>
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <language>java</language>
        <body>System.out.print(&quot;Please Enter An Input: &quot;);&#xD;
		scan = new Scanner(System.in);&#xD;
		String input = scan.nextLine().replaceAll(&quot;\\s+&quot;, &quot;&quot;);&#xD;
		return input;&#xD;
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UZJiHI7tEea0xZmjzxOSvw" name="getValidStation" specification="_UWqOxY7tEea0xZmjzxOSvw">
        <ownedParameter xmi:id="_UZJiHY7tEea0xZmjzxOSvw" direction="return">
          <name xsi:nil="true"/>
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <language>java</language>
        <body>String stationName = getInput();&#xD;
		String stationID = null;&#xD;
		int count;&#xD;
&#xD;
		do {&#xD;
			count = mGraph.countNodeOccurences(stationName);&#xD;
			if (count == 0) {&#xD;
				System.out.println(&quot;Station entered does not Exist.&quot;);&#xD;
				stationName = getInput();&#xD;
			} else if (count > 1) {&#xD;
				stationID = clarifyMultipleInput(stationName);&#xD;
			} else {&#xD;
				stationID = mGraph.getIDFromName(stationName).get(0);&#xD;
			}&#xD;
		} while (count == 0);&#xD;
&#xD;
		return stationID;&#xD;
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UZJiHo7tEea0xZmjzxOSvw" name="clarifyMultipleInput" specification="_UWqOx47tEea0xZmjzxOSvw">
        <ownedParameter xmi:id="_UZJiH47tEea0xZmjzxOSvw" name="stationName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UZJiII7tEea0xZmjzxOSvw" direction="return">
          <name xsi:nil="true"/>
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <language>java</language>
        <body>ArrayList&lt;String> idList = mGraph.getIDFromName(stationName);&#xD;
		String stationID = &quot;&quot;;&#xD;
		System.out.println(&quot;Multiple stations have that name. Which of the following stations do you mean?&quot;);&#xD;
		&#xD;
		for (int i = 0; i &lt; idList.size(); i++) {&#xD;
			System.out&#xD;
					.println(&quot;Station ID: &quot; + idList.get(i) + &quot; On line: &quot; + mGraph.getEdgeLabelsFromID(idList.get(i)));&#xD;
		}&#xD;
		&#xD;
		while (!idList.contains(stationID)) {&#xD;
			System.out.print(&quot;Enter the ID of the station you wish to select: &quot;);&#xD;
			stationID = getInput();&#xD;
			if (!idList.contains(stationID))&#xD;
				System.out.println(&quot;Not a valid ID from the list above.&quot;);&#xD;
		}&#xD;
&#xD;
		return stationID;&#xD;
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UZJiIY7tEea0xZmjzxOSvw" name="main" specification="_UWqOyo7tEea0xZmjzxOSvw">
        <ownedParameter xmi:id="_UZJiIo7tEea0xZmjzxOSvw" name="args">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_UZJiI47tEea0xZmjzxOSvw" value="*"/>
        </ownedParameter>
        <language>java</language>
        <body>System.out.println(&quot;Welcome To The CS308 Group W07 Graph System\n&quot;);&#xD;
		System.out.print(&quot;Enter Numerical Values For Menu Interaction\n&quot;);&#xD;
		MetroMapParser mmp = new MetroMapParser(&quot;&quot;);&#xD;
		mGraph = mmp.generateGraphFromFile();&#xD;
		boolean exit = false;&#xD;
&#xD;
		while (!exit) {&#xD;
			System.out.println(&quot;Options Are:\n 1. Shortest Route\n 2. Search For Stations \n 3. Exit&quot;);&#xD;
			String userChoice = getInput();&#xD;
			&#xD;
			if (userChoice.equals(&quot;1&quot;)) {&#xD;
				System.out.println(&quot;You have chosen: Shortest Route.\n&quot;);&#xD;
				System.out.println(&quot;Please enter the name of the origin station&quot;);&#xD;
				String originID = getValidStation();&#xD;
				System.out.println(&quot;Please enter the name of the destination station&quot;);&#xD;
				String destinationID = getValidStation();&#xD;
				while (originID == destinationID) {&#xD;
					System.out.println(&quot;Dsetination is the same as Origin, enter new destination.&quot;);&#xD;
					destinationID = getValidStation();&#xD;
				}&#xD;
				ArrayList&lt;String> shortest = mGraph.searchShortestPath(originID, destinationID);&#xD;
				displayOutput(shortest);&#xD;
			} else if (userChoice.equals(&quot;2&quot;)) {&#xD;
				System.out.println(&quot;You have chosen: Search For The Station:\n&quot;);&#xD;
				System.out.println(&quot;Please enter the name of the station you would like searched\n&quot;);&#xD;
				String stationID = getValidStation();&#xD;
				System.out.println(&quot;Name: &quot; + mGraph.getNodeName(stationID) + &quot;\nID  : &quot; + stationID + &quot;\nLines: &quot; + mGraph.getEdgeLabelsFromID(stationID));&#xD;
			} else if (userChoice.equals(&quot;3&quot;)) {&#xD;
				System.out.println(&quot;Thank You For Using Our System! Exiting...&quot;);&#xD;
				MetroMapParser.usage();&#xD;
				exit = true;&#xD;
			} else {&#xD;
				System.out.print(&quot;Your input was invalid\n Please try again bby!\n&quot;);&#xD;
			}&#xD;
		}&#xD;
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UZJiJI7tEea0xZmjzxOSvw" name="displayOutput" specification="_UY5DVI7tEea0xZmjzxOSvw">
        <ownedParameter xmi:id="_UZJiJY7tEea0xZmjzxOSvw" name="stationList" type="_UYmIYo7tEea0xZmjzxOSvw"/>
        <language>java</language>
        <body>String prevColour = &quot;&quot;;&#xD;
		String nextColour = &quot;&quot;;&#xD;
		String lastColour = &quot;&quot;;&#xD;
		ArrayList&lt;String> lineList = new ArrayList&lt;String>();&#xD;
		ArrayList&lt;String> nextLineList = new ArrayList&lt;String>();&#xD;
		lastColour = mGraph.isEdge(stationList.get(stationList.size() - 2), stationList.get(stationList.size() - 1)).get(0);&#xD;
&#xD;
		if (stationList.size() > 2) {&#xD;
			lineList = mGraph.isEdge(stationList.get(0), stationList.get(1));&#xD;
			nextLineList = mGraph.isEdge(stationList.get(1), stationList.get(2));&#xD;
&#xD;
			for (int h = 0; h &lt; lineList.size(); h++) {&#xD;
				if (nextLineList.contains(lineList.get(h))) {&#xD;
					prevColour = lineList.get(h);&#xD;
					break;&#xD;
				}&#xD;
				if (h == lineList.size() - 1 &amp;&amp; !nextLineList.contains(lineList.get(h))) {&#xD;
					prevColour = lineList.get(0);&#xD;
				}&#xD;
			}&#xD;
		} else {&#xD;
			prevColour = mGraph.isEdge(stationList.get(0), stationList.get(1)).get(0);&#xD;
		}&#xD;
		System.out.println(&quot;\nGet on the &quot; + prevColour + &quot; line, towards &quot; + mGraph.getNodeName(stationList.get(1)));&#xD;
&#xD;
		for (int i = 0; i &lt; (stationList.size() - 1); i++) {&#xD;
&#xD;
			lineList = mGraph.isEdge(stationList.get(i), stationList.get(i + 1));&#xD;
			if (i &lt; stationList.size() - 2) {&#xD;
				nextLineList = mGraph.isEdge(stationList.get(i + 1), stationList.get(i + 2));&#xD;
				if (lineList.contains(lastColour)) {&#xD;
					nextColour = lastColour;&#xD;
				} else if (lineList.size() > 1) {&#xD;
					if (!lineList.contains(prevColour)) {&#xD;
						for (int j = 0; j &lt; lineList.size(); j++) {&#xD;
							if (nextLineList.contains(lineList.get(j))) {&#xD;
								nextColour = lineList.get(j);&#xD;
								break;&#xD;
							}&#xD;
							if (j == lineList.size() - 1 &amp;&amp; !nextLineList.contains(lineList.get(j))) {&#xD;
								nextColour = lineList.get(0);&#xD;
							}&#xD;
						}&#xD;
					} else {&#xD;
						nextColour = prevColour;&#xD;
					}&#xD;
				} else {&#xD;
					nextColour = lineList.get(0);&#xD;
				}&#xD;
			} else {&#xD;
				nextColour = lineList.get(0);&#xD;
			}&#xD;
&#xD;
			if (!(nextColour).equals(prevColour)) {&#xD;
				System.out.println(&quot;Change at &quot; + mGraph.getNodeName(stationList.get(i)) + &quot; to the &quot; + nextColour + &quot; line, towards &quot; + mGraph.getNodeName(stationList.get(i + 1)));&#xD;
			}&#xD;
			prevColour = nextColour;&#xD;
		}&#xD;
		System.out.println(&quot;You Have Arrived At &quot; + mGraph.getNodeName(stationList.get(stationList.size() - 1)) + &quot;\n&quot;);&#xD;
	</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_UWqOw47tEea0xZmjzxOSvw" name="getInput" visibility="private" isStatic="true" method="_UZJiGo7tEea0xZmjzxOSvw">
        <ownedComment xmi:id="_Owa7sI-tEeaEOOcxHen0DA">
          <body>Getting the input from the user &#xD;
	 *</body>
        </ownedComment>
        <ownedParameter xmi:id="_UWqOxI7tEea0xZmjzxOSvw" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_UWqOxY7tEea0xZmjzxOSvw" name="getValidStation" visibility="private" isStatic="true" method="_UZJiHI7tEea0xZmjzxOSvw">
        <ownedComment xmi:id="_Owa7sY-tEeaEOOcxHen0DA">
          <body> Checking if the input given is acceptable. Returns the stationID so&#xD;
	 *   that it can continue with the search&#xD;
	 *  &#xD;
	 *  @return String stationID &#xD;
	 *</body>
        </ownedComment>
        <ownedParameter xmi:id="_UWqOxo7tEea0xZmjzxOSvw" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_UWqOx47tEea0xZmjzxOSvw" name="clarifyMultipleInput" visibility="private" isStatic="true" method="_UZJiHo7tEea0xZmjzxOSvw">
        <ownedComment xmi:id="_Owa7so-tEeaEOOcxHen0DA">
          <body> Used in the case of having two or more stations with the same name. Gets as&#xD;
	 *  an input the name of the station, asks the user for which station is referring to&#xD;
	 *  and returns the correct station ID to be used for the search.                        &#xD;
	 * &#xD;
	 * @param  String stationName&#xD;
	 * @return String stationID&#xD;
	 *</body>
        </ownedComment>
        <ownedParameter xmi:id="_UWqOyI7tEea0xZmjzxOSvw" name="stationName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UWqOyY7tEea0xZmjzxOSvw" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_UWqOyo7tEea0xZmjzxOSvw" name="main" isStatic="true" method="_UZJiIY7tEea0xZmjzxOSvw" raisedException="_UWXTwI7tEea0xZmjzxOSvw _UYmIYI7tEea0xZmjzxOSvw">
        <ownedParameter xmi:id="_UWqOy47tEea0xZmjzxOSvw" name="args">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_UWz_sY7tEea0xZmjzxOSvw" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_UY5DVI7tEea0xZmjzxOSvw" name="displayOutput" visibility="private" isStatic="true" method="_UZJiJI7tEea0xZmjzxOSvw">
        <ownedComment xmi:id="_Owa7s4-tEeaEOOcxHen0DA">
          <body>Gets the list of the stations of the shortest path given by the search. Checks if &#xD;
	 * there are changes of lines in this path and outputs steps on how to go from one station to&#xD;
	 * the other in the shortest way.                           &#xD;
	 * &#xD;
	 * @param  ArrayList&lt;String> stationList&#xD;
	 * &#xD;
	 *</body>
        </ownedComment>
        <ownedParameter xmi:id="_UY5DVY7tEea0xZmjzxOSvw" name="stationList" type="_UYmIYo7tEea0xZmjzxOSvw"/>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_UWz_s47tEea0xZmjzxOSvw" name="MetroMapParser">
      <ownedAttribute xmi:id="_UZIT4I7tEea0xZmjzxOSvw" name="fileInput" visibility="private" type="_UYmIZo7tEea0xZmjzxOSvw" association="_UZTTPo7tEea0xZmjzxOSvw"/>
      <ownedAttribute xmi:id="_ZckjIY7uEea0xZmjzxOSvw" name="menu" type="_UWqOwo7tEea0xZmjzxOSvw" association="_ZckjII7uEea0xZmjzxOSvw">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_ZckjIo7uEea0xZmjzxOSvw"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_ZckjI47uEea0xZmjzxOSvw" value="1"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UZJiJo7tEea0xZmjzxOSvw" name="MetroMapParser" specification="_UWz_tI7tEea0xZmjzxOSvw">
        <ownedParameter xmi:id="_UZJiJ47tEea0xZmjzxOSvw" name="filename">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UZJiKI7tEea0xZmjzxOSvw" type="_UWz_s47tEea0xZmjzxOSvw" direction="return"/>
        <language>java</language>
        <body>// a buffered reader reads line by line, returning null when file is&#xD;
		// done&#xD;
		filename = &quot;bostonmetro.txt&quot;;&#xD;
		fileInput = new BufferedReader(new FileReader(filename));&#xD;
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UZJiKY7tEea0xZmjzxOSvw" name="usage" specification="_UWz_uY7tEea0xZmjzxOSvw">
        <language>java</language>
        <body>// prints a usage message to System.out&#xD;
		System.out.println(&quot;java ex3.MetroMapParser &lt;bostonmetro.txt>&quot;);&#xD;
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UZJiKo7tEea0xZmjzxOSvw" name="generateGraphFromFile" specification="_UWz_uo7tEea0xZmjzxOSvw">
        <ownedParameter xmi:id="_UZJiK47tEea0xZmjzxOSvw" type="_UXG6qo7tEea0xZmjzxOSvw" direction="return"/>
        <language>java</language>
        <body>MultigraphADT mGraph = new Multigraph();&#xD;
&#xD;
		String line = fileInput.readLine();&#xD;
		StringTokenizer st;&#xD;
		String stationID;&#xD;
		String stationName;&#xD;
		String lineName;&#xD;
		String outboundID, inboundID;&#xD;
&#xD;
		while (line != null) {&#xD;
&#xD;
			st = new StringTokenizer(line);&#xD;
&#xD;
			// We want to handle empty lines effectively, we just ignore them!&#xD;
			if (!st.hasMoreTokens()) {&#xD;
				line = fileInput.readLine();&#xD;
				continue;&#xD;
			}&#xD;
&#xD;
			// from the grammar, we know that the Station ID is the first token&#xD;
			// on the line&#xD;
			stationID = st.nextToken();&#xD;
&#xD;
			if (!st.hasMoreTokens()) {&#xD;
				throw new BadFileException(&quot;no station name&quot;);&#xD;
			}&#xD;
&#xD;
			// from the grammar, we know that the Station Name is the second&#xD;
			// token on the line.&#xD;
			stationName = st.nextToken();&#xD;
&#xD;
			if (!st.hasMoreTokens()) {&#xD;
				throw new BadFileException(&quot;station is on no lines&quot;);&#xD;
			}&#xD;
			mGraph.addNode(stationID, stationName);&#xD;
&#xD;
			while (st.hasMoreTokens()) {&#xD;
				lineName = st.nextToken();&#xD;
&#xD;
				if (!st.hasMoreTokens()) {&#xD;
					throw new BadFileException(&quot;poorly formatted line info&quot;);&#xD;
				}&#xD;
&#xD;
				outboundID = st.nextToken();&#xD;
&#xD;
				if (!st.hasMoreTokens()) {&#xD;
					throw new BadFileException(&quot;poorly formatted adjacent stations&quot;);&#xD;
				}&#xD;
&#xD;
				inboundID = st.nextToken();&#xD;
				&#xD;
				if(!inboundID.equals(&quot;0&quot;)){&#xD;
					if(!mGraph.edgeExists(lineName, stationID, inboundID))&#xD;
						mGraph.addEdge(lineName, stationID, inboundID);&#xD;
				}&#xD;
				if(!outboundID.equals(&quot;0&quot;)){&#xD;
					if(!mGraph.edgeExists(lineName, stationID, outboundID))&#xD;
						mGraph.addEdge(lineName, stationID, outboundID);&#xD;
				}&#xD;
			}&#xD;
&#xD;
			line = fileInput.readLine();&#xD;
		}&#xD;
		return mGraph;&#xD;
&#xD;
	</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_UWz_tI7tEea0xZmjzxOSvw" name="MetroMapParser" method="_UZJiJo7tEea0xZmjzxOSvw" raisedException="_UYmIYI7tEea0xZmjzxOSvw">
        <eAnnotations xmi:id="_UWz_to7tEea0xZmjzxOSvw" source="http://www.eclipse.org/uml2/2.0.0/UML">
          <details xmi:id="_UWz_t47tEea0xZmjzxOSvw" key="create"/>
        </eAnnotations>
        <ownedParameter xmi:id="_UWz_tY7tEea0xZmjzxOSvw" name="filename">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UWz_uI7tEea0xZmjzxOSvw" type="_UWz_s47tEea0xZmjzxOSvw" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:id="_UWz_uY7tEea0xZmjzxOSvw" name="usage" isStatic="true" method="_UZJiKY7tEea0xZmjzxOSvw"/>
      <ownedOperation xmi:id="_UWz_uo7tEea0xZmjzxOSvw" name="generateGraphFromFile" method="_UZJiKo7tEea0xZmjzxOSvw" raisedException="_UYmIYI7tEea0xZmjzxOSvw _UWXTwI7tEea0xZmjzxOSvw">
        <ownedParameter xmi:id="_UYmIbI7tEea0xZmjzxOSvw" type="_UXG6qo7tEea0xZmjzxOSvw" direction="return"/>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_UWz_u47tEea0xZmjzxOSvw" name="Multigraph">
      <ownedAttribute xmi:id="_UZI68I7tEea0xZmjzxOSvw" name="nodeList" visibility="private" type="_UYmIYo7tEea0xZmjzxOSvw" association="_UZdEAY7tEea0xZmjzxOSvw"/>
      <ownedAttribute xmi:id="_UZJiAo7tEea0xZmjzxOSvw" name="edgeList" visibility="private" type="_UYmIYo7tEea0xZmjzxOSvw" isReadOnly="true" association="_UZdEBI7tEea0xZmjzxOSvw"/>
      <interfaceRealization xmi:id="_UYv5ZI7tEea0xZmjzxOSvw" client="_UWz_u47tEea0xZmjzxOSvw" supplier="_UXG6qo7tEea0xZmjzxOSvw" contract="_UXG6qo7tEea0xZmjzxOSvw"/>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UZJiLo7tEea0xZmjzxOSvw" name="Multigraph" specification="_UWz_vI7tEea0xZmjzxOSvw">
        <ownedParameter xmi:id="_UZJiL47tEea0xZmjzxOSvw" type="_UWz_u47tEea0xZmjzxOSvw" direction="return">
          <name xsi:nil="true"/>
        </ownedParameter>
        <language>java</language>
        <body>nodeList = new ArrayList&lt;Node>();&#xD;
		edgeList = new ArrayList&lt;Edge>();&#xD;
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UZTTAI7tEea0xZmjzxOSvw" name="getNodeName">
        <ownedParameter xmi:id="_UZTTAY7tEea0xZmjzxOSvw" name="id">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UZTTAo7tEea0xZmjzxOSvw" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <language>java</language>
        <body>for (int i = 0; i &lt; nodeList.size(); i++) {&#xD;
			if (nodeList.get(i).getID().equals(id)) {&#xD;
				return nodeList.get(i).getName();&#xD;
			}&#xD;
		}&#xD;
		return null;&#xD;
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UZTTA47tEea0xZmjzxOSvw" name="getIDFromName">
        <ownedParameter xmi:id="_UZTTBI7tEea0xZmjzxOSvw" name="nodeName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UZTTBY7tEea0xZmjzxOSvw" type="_UYmIYo7tEea0xZmjzxOSvw" direction="return">
          <name xsi:nil="true"/>
        </ownedParameter>
        <language>java</language>
        <body>ArrayList&lt;String> idList = new ArrayList&lt;String>();&#xD;
		for (int i = 0; i &lt; nodeList.size(); i++) {&#xD;
			if (nodeName.equalsIgnoreCase(nodeList.get(i).getName())) {&#xD;
				idList.add(nodeList.get(i).getID());&#xD;
			}&#xD;
		}&#xD;
		&#xD;
		return idList;&#xD;
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UZTTBo7tEea0xZmjzxOSvw" name="returnColour">
        <ownedParameter xmi:id="_UZTTB47tEea0xZmjzxOSvw" name="nodeA">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UZTTCI7tEea0xZmjzxOSvw" name="nodeB">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UZTTCY7tEea0xZmjzxOSvw" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <language>java</language>
        <body>//checks the colours in between 2 nodes&#xD;
		for (int c = 0; c &lt; edgeList.size(); c++) {&#xD;
			if (edgeList.get(c).getNodeA().equals(nodeA) &amp;&amp; edgeList.get(c).getNodeB().equals(nodeB)) {&#xD;
				return edgeList.get(c).getLabel();&#xD;
			} else if (edgeList.get(c).getNodeA().equals(nodeB) &amp;&amp; edgeList.get(c).getNodeB().equals(nodeA)) {&#xD;
				return edgeList.get(c).getLabel();&#xD;
			}&#xD;
		}&#xD;
		return null;&#xD;
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UZTTCo7tEea0xZmjzxOSvw" name="addEdge">
        <ownedParameter xmi:id="_anc0FI-tEeaEOOcxHen0DA" direction="return">
          <name xsi:nil="true"/>
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
        </ownedParameter>
        <ownedParameter xmi:id="_anc0FY-tEeaEOOcxHen0DA" name="label">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_anc0Fo-tEeaEOOcxHen0DA" name="successor">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_anc0F4-tEeaEOOcxHen0DA" name="predecessor">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <language>java</language>
        <body>edgeList.add(new Edge(label, successor, predecessor));&#xD;
		return true;&#xD;
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UZTTDY7tEea0xZmjzxOSvw" name="addNode">
        <ownedParameter xmi:id="_UZTTDo7tEea0xZmjzxOSvw" name="nodeID">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UZTTD47tEea0xZmjzxOSvw" name="nodeName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UZTTEI7tEea0xZmjzxOSvw" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
        </ownedParameter>
        <language>java</language>
        <body>nodeList.add(new Node(nodeID, nodeName));&#xD;
		return true;&#xD;
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UZTTEY7tEea0xZmjzxOSvw" name="addEdge">
        <ownedParameter xmi:id="_UZTTEo7tEea0xZmjzxOSvw" name="label">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UZTTE47tEea0xZmjzxOSvw" name="successor">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UZTTFI7tEea0xZmjzxOSvw" name="predecessor">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UZTTFY7tEea0xZmjzxOSvw" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
        </ownedParameter>
        <language>java</language>
        <body>edgeList.add(new Edge(label, successor, predecessor));&#xD;
		return true;&#xD;
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UZTTFo7tEea0xZmjzxOSvw" name="isEdge">
        <ownedParameter xmi:id="_UZTTF47tEea0xZmjzxOSvw" name="nodeA">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UZTTGI7tEea0xZmjzxOSvw" name="nodeB">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UZTTGY7tEea0xZmjzxOSvw" type="_UYmIYo7tEea0xZmjzxOSvw" direction="return"/>
        <language>java</language>
        <body>//checks the colours in between 2 nodes&#xD;
		ArrayList&lt;String> labelList = new ArrayList&lt;String>();&#xD;
		for (int c = 0; c &lt; edgeList.size(); c++) {&#xD;
			if (edgeList.get(c).getNodeA().equals(nodeA) &amp;&amp; edgeList.get(c).getNodeB().equals(nodeB)) {&#xD;
				labelList.add(edgeList.get(c).getLabel());&#xD;
			} else if (edgeList.get(c).getNodeA().equals(nodeB) &amp;&amp; edgeList.get(c).getNodeB().equals(nodeA)) {&#xD;
				labelList.add(edgeList.get(c).getLabel());&#xD;
			}&#xD;
		}&#xD;
		return labelList;&#xD;
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UZTTGo7tEea0xZmjzxOSvw" name="edgeExists">
        <ownedParameter xmi:id="_UZTTG47tEea0xZmjzxOSvw" name="label">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UZTTHI7tEea0xZmjzxOSvw" name="nodeA">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UZTTHY7tEea0xZmjzxOSvw" name="nodeB">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UZTTHo7tEea0xZmjzxOSvw" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedParameter>
        <language>java</language>
        <body>for (int c = 0; c &lt; edgeList.size(); c++) {&#xD;
			if (edgeList.get(c).getNodeA().equals(nodeA) &amp;&amp; edgeList.get(c).getNodeB().equals(nodeB) &amp;&amp; edgeList.get(c).getLabel().equals(label)) {&#xD;
				return true;&#xD;
			} else if (edgeList.get(c).getNodeA().equals(nodeB) &amp;&amp; edgeList.get(c).getNodeB().equals(nodeA) &amp;&amp; edgeList.get(c).getLabel().equals(label)) {&#xD;
				return true;&#xD;
			}&#xD;
		}&#xD;
		return false;&#xD;
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UZTTH47tEea0xZmjzxOSvw" name="countNodeOccurences">
        <ownedParameter xmi:id="_UZTTII7tEea0xZmjzxOSvw" name="nodeName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UZTTIY7tEea0xZmjzxOSvw" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
        </ownedParameter>
        <language>java</language>
        <body>int count = 0;&#xD;
		for (int i = 0; i &lt; nodeList.size(); i++) {&#xD;
			if (nodeList.get(i).getName().equalsIgnoreCase(nodeName)) {&#xD;
				count++;&#xD;
			}&#xD;
		}&#xD;
		return count;&#xD;
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UZTTIo7tEea0xZmjzxOSvw" name="searchShortestPath">
        <ownedParameter xmi:id="_UZTTI47tEea0xZmjzxOSvw" name="originID">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UZTTJI7tEea0xZmjzxOSvw" name="destinationID">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UZTTJY7tEea0xZmjzxOSvw" type="_UYmIYo7tEea0xZmjzxOSvw" direction="return"/>
        <language>java</language>
        <body>/*could be more efficient if routes that had reached the end were removed from the 2D array*/&#xD;
&#xD;
	  ArrayList&lt;ArrayList&lt;String>> routes = new ArrayList&lt;ArrayList&lt;String>>();&#xD;
	  ArrayList&lt;String> visited = new ArrayList&lt;String>();&#xD;
	  boolean found = false;&#xD;
	  int foundIndex = 0;&#xD;
	  &#xD;
	  visited.add(originID);&#xD;
	  for (int i = 0; i &lt; edgeList.size(); i++) {&#xD;
	   if (edgeList.get(i).getNodeA().equals(originID)) {&#xD;
	    routes.add(new ArrayList&lt;String>());&#xD;
	    routes.get(routes.size() - 1).add(originID);&#xD;
	    routes.get(routes.size() - 1).add(edgeList.get(i).getNodeB());&#xD;
	    visited.add(edgeList.get(i).getNodeB());&#xD;
	    printArrays(routes, visited); &#xD;
	   }&#xD;
	   if (edgeList.get(i).getNodeB().equals(originID)) {&#xD;
	    routes.add(new ArrayList&lt;String>());&#xD;
	    routes.get(routes.size() - 1).add(originID);&#xD;
	    routes.get(routes.size() - 1).add(edgeList.get(i).getNodeA());&#xD;
	    visited.add(edgeList.get(i).getNodeA());&#xD;
	    printArrays(routes, visited);&#xD;
	   }&#xD;
	  } /* creates a new path for each neighbour node of our source */&#xD;
	  &#xD;
	  for (int index = 0; index &lt; routes.size(); index++) {&#xD;
	   if (routes.get(index).get(routes.get(index).size() - 1).equals(destinationID)){&#xD;
	    found = true;&#xD;
	    foundIndex = index;&#xD;
	   }&#xD;
	  }&#xD;
&#xD;
	  while (!found) {&#xD;
	   /* add the next set of stations another step from origin to our routes */&#xD;
	   int routeSize = routes.size();&#xD;
	   for (int k = 0; k &lt; routeSize; k++) {&#xD;
	    String currentNodeID = (routes.get(k).get((routes.get(k).size()) - 1));&#xD;
	    ArrayList&lt;String> nextNodes = getNextNodeIDs(currentNodeID);&#xD;
	    &#xD;
	    nextNodes.removeAll(visited); /*if the next node has been visited by another path already&#xD;
	    then using this node would not be the shortest path */&#xD;
	    if (!nextNodes.isEmpty()) {&#xD;
	     /*add the first next node to our route*/&#xD;
	     ArrayList&lt;String> copy = new ArrayList&lt;String>();&#xD;
	     copy.addAll(routes.get(k));&#xD;
	     routes.get(k).add(nextNodes.get(0));&#xD;
	     visited.add(nextNodes.get(0));&#xD;
	     nextNodes.remove(nextNodes.get(0));&#xD;
	     while (!nextNodes.isEmpty()){&#xD;
	       /* make a new path for the other options when at a branching station,&#xD;
	        * copy what we had so far and search each one */&#xD;
	       String nextNodeID = nextNodes.get(0);&#xD;
	       routes.add(new ArrayList&lt;String>());&#xD;
	       routes.get(routes.size() - 1).addAll(copy);&#xD;
	       routes.get(routes.size() - 1).add((nextNodeID));&#xD;
	       visited.add(nextNodeID);&#xD;
	       if(nextNodeID == destinationID) {&#xD;
	        found = true;&#xD;
	        foundIndex = routes.size()-1;&#xD;
	       }&#xD;
	       nextNodes.remove(nextNodeID);&#xD;
	     } /* end of inner while */&#xD;
	     if(!found){&#xD;
	      for (int index = 0; index &lt; routes.size(); index++) {&#xD;
	       if (routes.get(index).get(routes.get(index).size() - 1).equals(destinationID)){&#xD;
	        found = true;&#xD;
	        foundIndex = index;&#xD;
	        break;&#xD;
	       }&#xD;
	      }&#xD;
	     }&#xD;
	    }&#xD;
	   }&#xD;
	  } /* end of while */&#xD;
	  return routes.get(foundIndex);&#xD;
	 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UZTTJo7tEea0xZmjzxOSvw" name="getNextNodeIDs" specification="_UXG6p47tEea0xZmjzxOSvw">
        <ownedParameter xmi:id="_UZTTJ47tEea0xZmjzxOSvw" name="currentNodeID">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UZTTKI7tEea0xZmjzxOSvw" type="_UYmIYo7tEea0xZmjzxOSvw" direction="return">
          <name xsi:nil="true"/>
        </ownedParameter>
        <language>java</language>
        <body>/*helper method for search to return all possible IDs reachable from the current node*/&#xD;
		ArrayList&lt;String> nextNodeIDs = new ArrayList&lt;String>();&#xD;
		for (int i = 0; i &lt; edgeList.size(); i++) {&#xD;
			if (edgeList.get(i).getNodeA().equals(currentNodeID)) {&#xD;
				nextNodeIDs.add(edgeList.get(i).getNodeB());&#xD;
			}&#xD;
			if (edgeList.get(i).getNodeB().equals(currentNodeID)) {&#xD;
				nextNodeIDs.add(edgeList.get(i).getNodeA());&#xD;
			}&#xD;
		}&#xD;
		Set&lt;String> uniqueIDs = new HashSet&lt;>();&#xD;
		uniqueIDs.addAll(nextNodeIDs);&#xD;
		nextNodeIDs.clear();&#xD;
		nextNodeIDs.addAll(uniqueIDs);&#xD;
		return nextNodeIDs;&#xD;
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UZTTKY7tEea0xZmjzxOSvw" name="searchShortestPath">
        <ownedParameter xmi:id="_andbI4-tEeaEOOcxHen0DA" type="_UYmIYo7tEea0xZmjzxOSvw" direction="return">
          <name xsi:nil="true"/>
        </ownedParameter>
        <ownedParameter xmi:id="_andbJI-tEeaEOOcxHen0DA" name="originID">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_andbJY-tEeaEOOcxHen0DA" name="destinationID">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <language>java</language>
        <body>/*could be more efficient if routes that had reached the end were removed from the 2D array*/&#xD;
		ArrayList&lt;ArrayList&lt;String>> routes = new ArrayList&lt;ArrayList&lt;String>>();&#xD;
		ArrayList&lt;String> visited = new ArrayList&lt;String>();&#xD;
		boolean found = false;&#xD;
		int foundIndex = 0;&#xD;
		visited.add(originID);&#xD;
		for (int i = 0; i &lt; edgeList.size(); i++) {&#xD;
			if (edgeList.get(i).getNodeA().equals(originID)) {&#xD;
				routes.add(new ArrayList&lt;String>());&#xD;
				routes.get(routes.size() - 1).add(originID);&#xD;
				routes.get(routes.size() - 1).add(edgeList.get(i).getNodeB());&#xD;
				visited.add(edgeList.get(i).getNodeB());&#xD;
			}&#xD;
			if (edgeList.get(i).getNodeB().equals(originID)) {&#xD;
				routes.add(new ArrayList&lt;String>());&#xD;
				routes.get(routes.size() - 1).add(originID);&#xD;
				routes.get(routes.size() - 1).add(edgeList.get(i).getNodeA());&#xD;
				visited.add(edgeList.get(i).getNodeA());&#xD;
			}&#xD;
		} /* creates a new path for each neighbour node of our source */&#xD;
	  &#xD;
		for (int index = 0; index &lt; routes.size(); index++) {&#xD;
			if (routes.get(index).get(routes.get(index).size() - 1).equals(destinationID)){&#xD;
				found = true;&#xD;
				foundIndex = index;&#xD;
			}&#xD;
		}&#xD;
&#xD;
	  while (!found) {&#xD;
		  /* add the next set of stations another step from origin to our routes */&#xD;
		  int routeSize = routes.size();&#xD;
		  for (int k = 0; k &lt; routeSize; k++) {&#xD;
			  String currentNodeID = (routes.get(k).get((routes.get(k).size()) - 1));&#xD;
			  ArrayList&lt;String> nextNodes = getNextNodeIDs(currentNodeID);&#xD;
			  nextNodes.removeAll(visited); /* if the next node has been visited by another path already&#xD;
			  								 * then using this node would not be the shortest path */&#xD;
			  if (!nextNodes.isEmpty()) {&#xD;
				  /*add the first next node to our route*/&#xD;
				  ArrayList&lt;String> copy = new ArrayList&lt;String>();&#xD;
				  copy.addAll(routes.get(k));&#xD;
				  routes.get(k).add(nextNodes.get(0));&#xD;
				  visited.add(nextNodes.get(0));&#xD;
				  nextNodes.remove(nextNodes.get(0));&#xD;
				  while (!nextNodes.isEmpty()){&#xD;
					  /* make a new path for the other options when at a branching station,&#xD;
					   * copy what we had so far and search each one */&#xD;
					  String nextNodeID = nextNodes.get(0);&#xD;
					  routes.add(new ArrayList&lt;String>());&#xD;
					  routes.get(routes.size() - 1).addAll(copy);&#xD;
					  routes.get(routes.size() - 1).add((nextNodeID));&#xD;
					  visited.add(nextNodeID);&#xD;
					  if(nextNodeID == destinationID) {&#xD;
						  found = true;&#xD;
						  foundIndex = routes.size()-1;&#xD;
					  }&#xD;
					  nextNodes.remove(nextNodeID);&#xD;
				 } /* end of inner while */&#xD;
				  if(!found){&#xD;
					  for (int index = 0; index &lt; routes.size(); index++) {&#xD;
						  if (routes.get(index).get(routes.get(index).size() - 1).equals(destinationID)){&#xD;
							  found = true;&#xD;
							  foundIndex = index;&#xD;
							  break;&#xD;
						  }&#xD;
					  }&#xD;
				  }&#xD;
			  }&#xD;
		  }&#xD;
	  } /* end of while */&#xD;
	  return routes.get(foundIndex);&#xD;
	 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_ancNAI-tEeaEOOcxHen0DA" name="getNodeName">
        <ownedParameter xmi:id="_ancNAY-tEeaEOOcxHen0DA" name="id">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_ancNAo-tEeaEOOcxHen0DA" direction="return">
          <name xsi:nil="true"/>
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <language>java</language>
        <body>for (int i = 0; i &lt; nodeList.size(); i++) {&#xD;
			if (nodeList.get(i).getID().equals(id)) {&#xD;
				return nodeList.get(i).getName();&#xD;
			}&#xD;
		}&#xD;
		return null;&#xD;
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UZJiLI7tEea0xZmjzxOSvw" name="isEdge">
        <ownedParameter xmi:id="_ancNA4-tEeaEOOcxHen0DA" type="_UYmIYo7tEea0xZmjzxOSvw" direction="return">
          <name xsi:nil="true"/>
        </ownedParameter>
        <ownedParameter xmi:id="_ancNBI-tEeaEOOcxHen0DA" name="nodeA">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_ancNBY-tEeaEOOcxHen0DA" name="nodeB">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <language>java</language>
        <body>ArrayList&lt;String> labelList = new ArrayList&lt;String>();&#xD;
		for (int i = 0; i &lt; edgeList.size(); i++) {&#xD;
			if (edgeList.get(i).getNodeA().equals(nodeA) &amp;&amp; edgeList.get(i).getNodeB().equals(nodeB)) {&#xD;
				labelList.add(edgeList.get(i).getLabel());&#xD;
			} else if (edgeList.get(i).getNodeA().equals(nodeB) &amp;&amp; edgeList.get(i).getNodeB().equals(nodeA)) {&#xD;
				labelList.add(edgeList.get(i).getLabel());&#xD;
			}&#xD;
		}&#xD;
		return labelList;&#xD;
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_anc0EI-tEeaEOOcxHen0DA" name="addNode">
        <ownedParameter xmi:id="_anc0EY-tEeaEOOcxHen0DA" name="nodeID">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_anc0Eo-tEeaEOOcxHen0DA" name="nodeName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_anc0E4-tEeaEOOcxHen0DA" direction="return">
          <name xsi:nil="true"/>
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
        </ownedParameter>
        <language>java</language>
        <body>nodeList.add(new Node(nodeID, nodeName));&#xD;
		return true;&#xD;
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_anc0GI-tEeaEOOcxHen0DA" name="edgeExists">
        <ownedParameter xmi:id="_anc0GY-tEeaEOOcxHen0DA" name="label">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_anc0Go-tEeaEOOcxHen0DA" name="nodeA">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_anc0G4-tEeaEOOcxHen0DA" name="nodeB">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_anc0HI-tEeaEOOcxHen0DA" direction="return">
          <name xsi:nil="true"/>
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedParameter>
        <language>java</language>
        <body>for (int c = 0; c &lt; edgeList.size(); c++) {&#xD;
			if (edgeList.get(c).getNodeA().equals(nodeA) &amp;&amp; edgeList.get(c).getNodeB().equals(nodeB) &amp;&amp; edgeList.get(c).getLabel().equals(label)) {&#xD;
				return true;&#xD;
			} else if (edgeList.get(c).getNodeA().equals(nodeB) &amp;&amp; edgeList.get(c).getNodeB().equals(nodeA) &amp;&amp; edgeList.get(c).getLabel().equals(label)) {&#xD;
				return true;&#xD;
			}&#xD;
		}&#xD;
		return false;&#xD;
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_andbII-tEeaEOOcxHen0DA" name="countNodeOccurences">
        <ownedParameter xmi:id="_andbIY-tEeaEOOcxHen0DA" name="nodeName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_andbIo-tEeaEOOcxHen0DA" direction="return">
          <name xsi:nil="true"/>
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
        </ownedParameter>
        <language>java</language>
        <body>int count = 0;&#xD;
		for (int i = 0; i &lt; nodeList.size(); i++) {&#xD;
			if (nodeList.get(i).getName().equalsIgnoreCase(nodeName)) {&#xD;
				count++;&#xD;
			}&#xD;
		}&#xD;
		return count;&#xD;
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_g7xR0I-tEeaEOOcxHen0DA" name="getEdgeLabelsFromID">
        <ownedParameter xmi:id="_g7xR0Y-tEeaEOOcxHen0DA" name="nodeID">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_g7xR0o-tEeaEOOcxHen0DA" type="_UYmIYo7tEea0xZmjzxOSvw" direction="return"/>
        <language>java</language>
        <body>//checks the colours around a single node&#xD;
		ArrayList&lt;String> labelList = new ArrayList&lt;String>();&#xD;
		for(int i = 0; i &lt; edgeList.size(); i++){&#xD;
			if(edgeList.get(i).getNodeA().equals(nodeID) || edgeList.get(i).getNodeB().equals(nodeID)){&#xD;
				if(!labelList.contains(edgeList.get(i).getLabel())){&#xD;
					labelList.add(edgeList.get(i).getLabel());&#xD;
					//System.out.println(&quot;Added: &quot; + edgeList.get(i).getLabel());&#xD;
				}&#xD;
			}&#xD;
		}&#xD;
		return labelList;&#xD;
	</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_UWz_vI7tEea0xZmjzxOSvw" name="Multigraph" method="_UZJiLo7tEea0xZmjzxOSvw">
        <eAnnotations xmi:id="_UW9JoI7tEea0xZmjzxOSvw" source="http://www.eclipse.org/uml2/2.0.0/UML">
          <details xmi:id="_UW9JoY7tEea0xZmjzxOSvw" key="create"/>
        </eAnnotations>
        <ownedParameter xmi:id="_UW9Joo7tEea0xZmjzxOSvw" type="_UWz_u47tEea0xZmjzxOSvw" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:id="_UXG6p47tEea0xZmjzxOSvw" name="getNextNodeIDs" visibility="private" method="_UZTTJo7tEea0xZmjzxOSvw">
        <ownedComment xmi:id="_anepQI-tEeaEOOcxHen0DA">
          <body> Not used in interface.&#xD;
	  * &#xD;
	  *</body>
        </ownedComment>
        <ownedParameter xmi:id="_UXG6qI7tEea0xZmjzxOSvw" name="currentNodeID">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UY5DW47tEea0xZmjzxOSvw" type="_UYmIYo7tEea0xZmjzxOSvw" direction="return"/>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="_UXG6qo7tEea0xZmjzxOSvw" name="MultigraphADT">
      <ownedAttribute xmi:id="_LTeeQo-uEeaEOOcxHen0DA" name="nodeIn" type="_UXjmoo7tEea0xZmjzxOSvw" aggregation="composite" association="_LTcpEI-uEeaEOOcxHen0DA">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_LTfFUI-uEeaEOOcxHen0DA"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_LTfFUY-uEeaEOOcxHen0DA" value="*"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_M_3Hk4-uEeaEOOcxHen0DA" name="edgeIn" type="_UWqOt47tEea0xZmjzxOSvw" aggregation="composite" association="_M_2ggI-uEeaEOOcxHen0DA">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_M_3HlI-uEeaEOOcxHen0DA"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_M_3HlY-uEeaEOOcxHen0DA" value="*"/>
      </ownedAttribute>
      <ownedOperation xmi:id="_UXG6q47tEea0xZmjzxOSvw" name="getNodeName">
        <ownedParameter xmi:id="_UXG6rI7tEea0xZmjzxOSvw" name="id">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UXQroI7tEea0xZmjzxOSvw" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_UXQroY7tEea0xZmjzxOSvw" name="addNode">
        <ownedParameter xmi:id="_UXQroo7tEea0xZmjzxOSvw" name="nodeID">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UXQro47tEea0xZmjzxOSvw" name="nodeName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UXQrpI7tEea0xZmjzxOSvw" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_UXQrpY7tEea0xZmjzxOSvw" name="addEdge">
        <ownedParameter xmi:id="_UXQrpo7tEea0xZmjzxOSvw" name="label">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UXQrp47tEea0xZmjzxOSvw" name="successor">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UXQrqI7tEea0xZmjzxOSvw" name="predecessor">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UXQrqY7tEea0xZmjzxOSvw" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_UXQrqo7tEea0xZmjzxOSvw" name="isEdge">
        <ownedParameter xmi:id="_UXQrq47tEea0xZmjzxOSvw" name="nodeA">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UXQrrI7tEea0xZmjzxOSvw" name="nodeB">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UZC0UI7tEea0xZmjzxOSvw" type="_UYmIYo7tEea0xZmjzxOSvw" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:id="_UXZ1kI7tEea0xZmjzxOSvw" name="countNodeOccurences">
        <ownedParameter xmi:id="_UXZ1kY7tEea0xZmjzxOSvw" name="nodeName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UXZ1ko7tEea0xZmjzxOSvw" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_UXZ1k47tEea0xZmjzxOSvw" name="getIDFromName">
        <ownedParameter xmi:id="_UXZ1lI7tEea0xZmjzxOSvw" name="stationName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UZC0UY7tEea0xZmjzxOSvw" type="_UYmIYo7tEea0xZmjzxOSvw" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:id="_UXZ1mY7tEea0xZmjzxOSvw" name="searchShortestPath">
        <ownedParameter xmi:id="_UXZ1mo7tEea0xZmjzxOSvw" name="originID">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UXZ1m47tEea0xZmjzxOSvw" name="destinationID">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UZC0U47tEea0xZmjzxOSvw" type="_UYmIYo7tEea0xZmjzxOSvw" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:id="_UXZ1nY7tEea0xZmjzxOSvw" name="edgeExists">
        <ownedParameter xmi:id="_UXZ1no7tEea0xZmjzxOSvw" name="label">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UXZ1n47tEea0xZmjzxOSvw" name="nodeA">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UXZ1oI7tEea0xZmjzxOSvw" name="nodeB">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UXZ1oY7tEea0xZmjzxOSvw" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oDCPcI-tEeaEOOcxHen0DA" name="getEdgeLabelsFromID">
        <ownedParameter xmi:id="_oDCPcY-tEeaEOOcxHen0DA" name="nodeID">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_oDCPco-tEeaEOOcxHen0DA" type="_UYmIYo7tEea0xZmjzxOSvw" direction="return"/>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_UXjmk47tEea0xZmjzxOSvw" name="Node">
      <ownedAttribute xmi:id="_UZJiCI7tEea0xZmjzxOSvw" name="id" visibility="private">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_UZJiCo7tEea0xZmjzxOSvw" name="name" visibility="private" isReadOnly="true">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      </ownedAttribute>
      <interfaceRealization xmi:id="_UYv5ZY7tEea0xZmjzxOSvw" client="_UXjmk47tEea0xZmjzxOSvw" supplier="_UXjmoo7tEea0xZmjzxOSvw" contract="_UXjmoo7tEea0xZmjzxOSvw"/>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UZTTLI7tEea0xZmjzxOSvw" name="Node" specification="_UXjmlI7tEea0xZmjzxOSvw">
        <ownedParameter xmi:id="_UZTTLY7tEea0xZmjzxOSvw" name="nodeID">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UZTTLo7tEea0xZmjzxOSvw" name="nodeName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UZTTL47tEea0xZmjzxOSvw" type="_UXjmk47tEea0xZmjzxOSvw" direction="return"/>
        <language>java</language>
        <body>id = nodeID;&#xD;
		name = nodeName;&#xD;
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UZTTMI7tEea0xZmjzxOSvw" name="getID">
        <ownedParameter xmi:id="_UZTTMY7tEea0xZmjzxOSvw" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <language>java</language>
        <body>return id;&#xD;
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UZTTMo7tEea0xZmjzxOSvw" name="setId">
        <ownedParameter xmi:id="_UZTTM47tEea0xZmjzxOSvw" name="nodeID">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UZTTNI7tEea0xZmjzxOSvw" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
        </ownedParameter>
        <language>java</language>
        <body>id = nodeID;&#xD;
		return true;&#xD;
	</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UZTTNY7tEea0xZmjzxOSvw" name="setName">
        <ownedParameter xmi:id="_UZTTNo7tEea0xZmjzxOSvw" name="nodeName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UZTTN47tEea0xZmjzxOSvw" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
        </ownedParameter>
        <language>java</language>
        <body>name = nodeName;&#xD;
		return true;&#xD;
	</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_UXjmlI7tEea0xZmjzxOSvw" name="Node" method="_UZTTLI7tEea0xZmjzxOSvw">
        <eAnnotations xmi:id="_UXjml47tEea0xZmjzxOSvw" source="http://www.eclipse.org/uml2/2.0.0/UML">
          <details xmi:id="_UXjmmI7tEea0xZmjzxOSvw" key="create"/>
        </eAnnotations>
        <ownedParameter xmi:id="_UXjmlY7tEea0xZmjzxOSvw" name="nodeID">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UXjmlo7tEea0xZmjzxOSvw" name="nodeName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UXjmmY7tEea0xZmjzxOSvw" type="_UXjmk47tEea0xZmjzxOSvw" direction="return"/>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="_UXjmoo7tEea0xZmjzxOSvw" name="NodeIn">
      <ownedAttribute xmi:id="_LTdQII-uEeaEOOcxHen0DA" name="multigraphADT" type="_UXG6qo7tEea0xZmjzxOSvw" association="_LTcpEI-uEeaEOOcxHen0DA">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_LTeeQI-uEeaEOOcxHen0DA" value="1"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_LTeeQY-uEeaEOOcxHen0DA" value="1"/>
      </ownedAttribute>
      <ownedOperation xmi:id="_UXswgI7tEea0xZmjzxOSvw" name="setId">
        <ownedParameter xmi:id="_UXswgY7tEea0xZmjzxOSvw" name="nodeID">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UXswgo7tEea0xZmjzxOSvw" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_UXswg47tEea0xZmjzxOSvw" name="setName">
        <ownedParameter xmi:id="_UXswhI7tEea0xZmjzxOSvw" name="nodeName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_UXswhY7tEea0xZmjzxOSvw" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_8UE8MI-sEeaEOOcxHen0DA" name="getID">
        <ownedParameter xmi:id="_8UE8MY-sEeaEOOcxHen0DA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_9AG7wI-sEeaEOOcxHen0DA" name="getName">
        <ownedParameter xmi:id="_9AG7wY-sEeaEOOcxHen0DA" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_UZTTOI7tEea0xZmjzxOSvw" name="" memberEnd="_UZTTOY7tEea0xZmjzxOSvw _UZHFwI7tEea0xZmjzxOSvw">
      <ownedEnd xmi:id="_UZTTOY7tEea0xZmjzxOSvw" name="" type="_UWqOwo7tEea0xZmjzxOSvw" association="_UZTTOI7tEea0xZmjzxOSvw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_UZTTO47tEea0xZmjzxOSvw" name="" memberEnd="_UZTTPI7tEea0xZmjzxOSvw _UZHs0Y7tEea0xZmjzxOSvw">
      <ownedEnd xmi:id="_UZTTPI7tEea0xZmjzxOSvw" name="" type="_UWqOwo7tEea0xZmjzxOSvw" association="_UZTTO47tEea0xZmjzxOSvw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_UZTTPo7tEea0xZmjzxOSvw" name="" memberEnd="_UZTTP47tEea0xZmjzxOSvw _UZIT4I7tEea0xZmjzxOSvw">
      <ownedEnd xmi:id="_UZTTP47tEea0xZmjzxOSvw" name="" type="_UWz_s47tEea0xZmjzxOSvw" association="_UZTTPo7tEea0xZmjzxOSvw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_UZdEAY7tEea0xZmjzxOSvw" name="" memberEnd="_UZdEAo7tEea0xZmjzxOSvw _UZI68I7tEea0xZmjzxOSvw">
      <ownedEnd xmi:id="_UZdEAo7tEea0xZmjzxOSvw" name="" type="_UWz_u47tEea0xZmjzxOSvw" association="_UZdEAY7tEea0xZmjzxOSvw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_UZdEBI7tEea0xZmjzxOSvw" name="" memberEnd="_UZdEBY7tEea0xZmjzxOSvw _UZJiAo7tEea0xZmjzxOSvw">
      <ownedEnd xmi:id="_UZdEBY7tEea0xZmjzxOSvw" name="" type="_UWz_u47tEea0xZmjzxOSvw" association="_UZdEBI7tEea0xZmjzxOSvw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Usage" xmi:id="_I_VUoI7uEea0xZmjzxOSvw" client="_UWz_s47tEea0xZmjzxOSvw" supplier="_UWXTwI7tEea0xZmjzxOSvw"/>
    <packagedElement xmi:type="uml:Usage" xmi:id="_Jhm7QI7uEea0xZmjzxOSvw" client="_UWz_s47tEea0xZmjzxOSvw" supplier="_UYmIYI7tEea0xZmjzxOSvw"/>
    <packagedElement xmi:type="uml:Association" xmi:id="_ZckjII7uEea0xZmjzxOSvw" name="" memberEnd="_ZckjIY7uEea0xZmjzxOSvw _ZckjJI7uEea0xZmjzxOSvw">
      <ownedEnd xmi:id="_ZckjJI7uEea0xZmjzxOSvw" name="" type="_UWz_s47tEea0xZmjzxOSvw" aggregation="shared" association="_ZckjII7uEea0xZmjzxOSvw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Dependency" xmi:id="_xD8dEI7uEea0xZmjzxOSvw" client="_UWz_s47tEea0xZmjzxOSvw" supplier="_UXG6qo7tEea0xZmjzxOSvw"/>
    <packagedElement xmi:type="uml:Association" xmi:id="_LTcpEI-uEeaEOOcxHen0DA" name="" memberEnd="_LTdQII-uEeaEOOcxHen0DA _LTeeQo-uEeaEOOcxHen0DA"/>
    <packagedElement xmi:type="uml:Association" xmi:id="_M_2ggI-uEeaEOOcxHen0DA" name="" memberEnd="_M_3HkI-uEeaEOOcxHen0DA _M_3Hk4-uEeaEOOcxHen0DA"/>
    <profileApplication xmi:id="_UEVIk47tEea0xZmjzxOSvw">
      <eAnnotations xmi:id="_UEVIlI7tEea0xZmjzxOSvw" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="pathmap://UMLLAB_PROFILES/UMLLab.profile.uml#UMLLabProfile-Annotation_2-UMLLabProfile"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UMLLAB_PROFILES/UMLLab.profile.uml#UMLLabProfile"/>
    </profileApplication>
  </uml:Model>
  <UMLLabProfile:TargetLanguage xmi:id="_UEVIlY7tEea0xZmjzxOSvw" base_Package="_T3yhYI7tEea0xZmjzxOSvw">
    <languageName>java</languageName>
  </UMLLabProfile:TargetLanguage>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UWz_sI7tEea0xZmjzxOSvw" base_Element="_UWqOyo7tEea0xZmjzxOSvw"/>
  <UMLLabProfile:Array xmi:id="_UWz_so7tEea0xZmjzxOSvw" dimensions="1" base_Element="_UWqOy47tEea0xZmjzxOSvw"/>
  <UMLLabProfile:Generics xmi:id="_UXG6qY7tEea0xZmjzxOSvw" genericsValue="String" base_Element="_UXG6p47tEea0xZmjzxOSvw"/>
  <UMLLabProfile:Generics xmi:id="_UXQrrY7tEea0xZmjzxOSvw" genericsValue="String" base_Element="_UXQrqo7tEea0xZmjzxOSvw"/>
  <UMLLabProfile:Generics xmi:id="_UXZ1lY7tEea0xZmjzxOSvw" genericsValue="String" base_Element="_UXZ1k47tEea0xZmjzxOSvw"/>
  <UMLLabProfile:Generics xmi:id="_UXZ1nI7tEea0xZmjzxOSvw" genericsValue="String" base_Element="_UXZ1mY7tEea0xZmjzxOSvw"/>
  <UMLLabProfile:Reference xmi:id="_UYmIYY7tEea0xZmjzxOSvw" base_Element="_UYmIYI7tEea0xZmjzxOSvw"/>
  <UMLLabProfile:Reference xmi:id="_UYmIY47tEea0xZmjzxOSvw" base_Element="_UYmIYo7tEea0xZmjzxOSvw"/>
  <UMLLabProfile:Reference xmi:id="_UYmIZY7tEea0xZmjzxOSvw" base_Element="_UYmIZI7tEea0xZmjzxOSvw"/>
  <UMLLabProfile:Reference xmi:id="_UYmIZ47tEea0xZmjzxOSvw" base_Element="_UYmIZo7tEea0xZmjzxOSvw"/>
  <UMLLabProfile:Reference xmi:id="_UYmIaY7tEea0xZmjzxOSvw" base_Element="_UYmIaI7tEea0xZmjzxOSvw"/>
  <UMLLabProfile:Reference xmi:id="_UYmIa47tEea0xZmjzxOSvw" base_Element="_UYmIao7tEea0xZmjzxOSvw"/>
  <UMLLabProfile:Reference xmi:id="_UYv5YY7tEea0xZmjzxOSvw" base_Element="_UYv5YI7tEea0xZmjzxOSvw"/>
  <UMLLabProfile:Reference xmi:id="_UYv5Y47tEea0xZmjzxOSvw" base_Element="_UYv5Yo7tEea0xZmjzxOSvw"/>
  <UMLLabProfile:Reference xmi:id="_UY5DUo7tEea0xZmjzxOSvw" base_Element="_UY5DUY7tEea0xZmjzxOSvw"/>
  <UMLLabProfile:Generics xmi:id="_UY5DVo7tEea0xZmjzxOSvw" genericsValue="String" base_Element="_UY5DVY7tEea0xZmjzxOSvw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UZHs0I7tEea0xZmjzxOSvw" base_Element="_UZHFwI7tEea0xZmjzxOSvw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UZHs0o7tEea0xZmjzxOSvw" base_Element="_UZHs0Y7tEea0xZmjzxOSvw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UZIT4Y7tEea0xZmjzxOSvw" base_Element="_UZIT4I7tEea0xZmjzxOSvw"/>
  <UMLLabProfile:Generics xmi:id="_UZJiAI7tEea0xZmjzxOSvw" genericsValue="Node" base_Element="_UZI68I7tEea0xZmjzxOSvw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UZJiAY7tEea0xZmjzxOSvw" base_Element="_UZI68I7tEea0xZmjzxOSvw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UZJiA47tEea0xZmjzxOSvw" base_Element="_UZJiAo7tEea0xZmjzxOSvw"/>
  <UMLLabProfile:Generics xmi:id="_UZJiBI7tEea0xZmjzxOSvw" genericsValue="Edge" base_Element="_UZJiAo7tEea0xZmjzxOSvw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UZJiCY7tEea0xZmjzxOSvw" base_Element="_UZJiCI7tEea0xZmjzxOSvw"/>
  <UMLLabProfile:Reference xmi:id="_UZTTOo7tEea0xZmjzxOSvw" base_Element="_UZTTOI7tEea0xZmjzxOSvw"/>
  <UMLLabProfile:Reference xmi:id="_UZTTPY7tEea0xZmjzxOSvw" base_Element="_UZTTO47tEea0xZmjzxOSvw"/>
  <UMLLabProfile:Reference xmi:id="_UZdEAI7tEea0xZmjzxOSvw" base_Element="_UZTTPo7tEea0xZmjzxOSvw"/>
  <UMLLabProfile:Reference xmi:id="_UZdEA47tEea0xZmjzxOSvw" base_Element="_UZdEAY7tEea0xZmjzxOSvw"/>
  <UMLLabProfile:Reference xmi:id="_UZdEBo7tEea0xZmjzxOSvw" base_Element="_UZdEBI7tEea0xZmjzxOSvw"/>
  <UMLLabProfile:Generics xmi:id="_oDC2gI-tEeaEOOcxHen0DA" genericsValue="String" base_Element="_oDCPcI-tEeaEOOcxHen0DA"/>
</xmi:XMI>
